FROM nvidia/cuda:10.1-devel-ubuntu18.04
FROM scrin/dev-spconv
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

RUN sudo add-apt-repository --remove 'deb [arch=amd64] https://dl.bintray.com/tetrate/getenvoy-deb focal stable'
RUN sudo add-apt-repository --remove '# deb-src [arch=amd64] https://dl.bintray.com/tetrate/getenvoy-deb focal stable'

# Install basics
RUN apt-get update -y \
    && apt-get install build-essential \
    && apt-get install -y apt-utils git curl ca-certificates bzip2 tree htop wget \
    && apt-get install -y libglib2.0-0 libsm6 libxext6 libxrender-dev bmon iotop g++ 

RUN apt-get install -y software-properties-common
RUN apt-get install -yq wget curl git build-essential vim sudo lsb-release locales bash-completion

# Install cmake v3.13.2
RUN apt-get purge -y cmake && \
    mkdir /root/temp && \
    cd /root/temp && \
    wget https://github.com/Kitware/CMake/releases/download/v3.13.2/cmake-3.13.2.tar.gz && \
    tar -xzvf cmake-3.13.2.tar.gz && \
    cd cmake-3.13.2 && \
    bash ./bootstrap && \
    make && \
    make install && \
    cmake --version && \
    rm -rf /root/temp


# Install python
RUN ln -sv /usr/bin/python3.8 /usr/bin/python

# RUN apt-get -y install python3-distutils
# RUN apt-get -y install python3-apt
# # RUN wget https://bootstrap.pypa.io/get-pip.py && \
# RUN wget https://bootstrap.pypa.io/pip/3.6/get-pip.py && \
# 	python get-pip.py && \
# 	rm get-pip.py


# Install python packages
RUN PIP_INSTALL="python -m pip --no-cache-dir install" && \
    $PIP_INSTALL numpy==1.19.3 llvmlite numba 

# Install torch and torchvision
# See https://pytorch.org/ for other options if you use a different version of CUDA
RUN pip3 install torch==1.5.0+cu101 -f https://download.pytorch.org/whl/cu101/torch_stable.html
RUN pip3 install numpy==1.19.5 #to solve numpy dependency issues with opencv!

# Install python packages
RUN PIP_INSTALL="python -m pip --no-cache-dir install" && \
    $PIP_INSTALL tensorboardX easydict pyyaml scikit-image tqdm SharedArray six

# WORKDIR /root

# Install Boost geometry
RUN wget https://jaist.dl.sourceforge.net/project/boost/boost/1.68.0/boost_1_68_0.tar.gz && \
    tar xzvf boost_1_68_0.tar.gz && \
    cp -r ./boost_1_68_0/boost /usr/include && \
    rm -rf ./boost_1_68_0 && \
    rm -rf ./boost_1_68_0.tar.gz 

# A weired problem that hasn't been solved yet
RUN pip3 uninstall -y SharedArray && \
    pip3 install SharedArray

# RUN pip3 install spconv-cu113

RUN pip3 install open3d==0.13
RUN pip3 install tensorflow-cpu==2.2.0
RUN pip3 install tensorflow-gpu==2.2.0
# RUN pip3 install waymo-open-dataset-tf-2-1-0==1.2.0
RUN pip3 install --upgrade git+https://github.com/klintan/pypcd.git
RUN apt install -y libgl1-mesa-glx

#just for running the Demo we need to add:
RUN apt-get update && apt-get install -y python3-opencv
RUN pip3 install opencv-python

#to get a GUI one needs to install:
RUN apt-get install -y python3-tk 
RUN apt-get install -y libnvidia-gl-510 x11-apps #this needs to match your GPU driver version!!!!!!!!!!!!!!

RUN apt-get install -y tmux tmuxp vim 
RUN apt-get install -y x11-xserver-utils

# Setup non-root admin user
ARG USERNAME=admin
ARG USER_UID=1000
ARG USER_GID=1000

# Install prerequisites
RUN apt-get update && apt-get install -y \
        sudo \
&& rm -rf /var/lib/apt/lists/* \
&& apt-get clean

# Reuse triton-server user as 'admin' user if exists
RUN if [ $(getent group triton-server) ]; then \
        groupmod --gid ${USER_GID} -n ${USERNAME} triton-server ; \
        usermod -l ${USERNAME} -u ${USER_UID} -m -d /home/${USERNAME} triton-server ; \
        mkdir -p /home/${USERNAME} ; \
        sudo chown ${USERNAME}:${USERNAME} /home/${USERNAME} ; \
    fi

# Create the 'admin' user if not already exists
RUN if [ ! $(getent passwd ${USERNAME}) ]; then \
        groupadd --gid ${USER_GID} ${USERNAME} ; \
        useradd --uid ${USER_UID} --gid ${USER_GID} -m ${USERNAME} ; \
    fi

# Update 'admin' user
RUN echo ${USERNAME} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${USERNAME} \
    && chmod 0440 /etc/sudoers.d/${USERNAME} \
    && adduser ${USERNAME} video && adduser ${USERNAME} sudo

# Copy scripts
#RUN mkdir -p /usr/local/bin/scripts
#COPY scripts/*entrypoint.sh /usr/local/bin/scripts/
#RUN  chmod +x /usr/local/bin/scripts/*.sh

# Copy middleware profiles
# RUN mkdir -p /usr/local/share/middleware_profiles
# COPY middleware_profiles/*profile.xml /usr/local/share/middleware_profiles/

ENV USERNAME=${USERNAME}
ENV USER_GID=${USER_GID}
ENV USER_UID=${USER_UID}



COPY pcdet /VOTR/pcdet
#COPY tools /VOTR/tools
# COPY docs /VOTR/docs

ENV PYTHONPATH="/VOTR/:$PYTHONPATH"
ADD setup.py /VOTR/

WORKDIR /VOTR
#RUN python /VOTR/setup.py develop


